// Package handler provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package handler

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new video game
	// (POST /games)
	PostGames(c *gin.Context)
	// Delete a video game
	// (DELETE /games/{id})
	DeleteGamesId(c *gin.Context, id string)
	// Get a specific video game
	// (GET /games/{id})
	GetGamesId(c *gin.Context, id string)
	// Update a video game
	// (PATCH /games/{id})
	PatchGamesId(c *gin.Context, id string)
	// Create a new trade offer
	// (POST /offers)
	PostOffers(c *gin.Context)
	// Delete an offer
	// (DELETE /offers/{id})
	DeleteOffersId(c *gin.Context, id string)
	// Get a specific trade offer
	// (GET /offers/{id})
	GetOffersId(c *gin.Context, id string)
	// Update an offer
	// (PATCH /offers/{id})
	PatchOffersId(c *gin.Context, id string)
	// Accepts the trade offer with the specified ID
	// (POST /offers/{id}/accept)
	PostOffersIdAccept(c *gin.Context, id string)
	// Get user's incoming offers
	// (GET /offers/{id}/incoming)
	GetOffersIdIncoming(c *gin.Context, id string)
	// Get user's outgoing offers
	// (GET /offers/{id}/outgoing)
	GetOffersIdOutgoing(c *gin.Context, id string)
	// Rejects the trade offer with the specified ID
	// (POST /offers/{id}/reject)
	PostOffersIdReject(c *gin.Context, id string)
	// Register a new user
	// (POST /users)
	PostUsers(c *gin.Context)
	// Delete user by ID
	// (DELETE /users/{id})
	DeleteUsersId(c *gin.Context, id string)
	// Get a specific user
	// (GET /users/{id})
	GetUsersId(c *gin.Context, id string)
	// Update user information
	// (PATCH /users/{id})
	PatchUsersId(c *gin.Context, id string)
	// Change user password
	// (POST /users/{id}/change-password)
	PostUsersIdChangePassword(c *gin.Context, id string)
	// Reset user password
	// (POST /users/{id}/reset-password)
	PostUsersIdResetPassword(c *gin.Context, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostGames operation middleware
func (siw *ServerInterfaceWrapper) PostGames(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostGames(c)
}

// DeleteGamesId operation middleware
func (siw *ServerInterfaceWrapper) DeleteGamesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteGamesId(c, id)
}

// GetGamesId operation middleware
func (siw *ServerInterfaceWrapper) GetGamesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGamesId(c, id)
}

// PatchGamesId operation middleware
func (siw *ServerInterfaceWrapper) PatchGamesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchGamesId(c, id)
}

// PostOffers operation middleware
func (siw *ServerInterfaceWrapper) PostOffers(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostOffers(c)
}

// DeleteOffersId operation middleware
func (siw *ServerInterfaceWrapper) DeleteOffersId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteOffersId(c, id)
}

// GetOffersId operation middleware
func (siw *ServerInterfaceWrapper) GetOffersId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOffersId(c, id)
}

// PatchOffersId operation middleware
func (siw *ServerInterfaceWrapper) PatchOffersId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchOffersId(c, id)
}

// PostOffersIdAccept operation middleware
func (siw *ServerInterfaceWrapper) PostOffersIdAccept(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostOffersIdAccept(c, id)
}

// GetOffersIdIncoming operation middleware
func (siw *ServerInterfaceWrapper) GetOffersIdIncoming(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOffersIdIncoming(c, id)
}

// GetOffersIdOutgoing operation middleware
func (siw *ServerInterfaceWrapper) GetOffersIdOutgoing(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOffersIdOutgoing(c, id)
}

// PostOffersIdReject operation middleware
func (siw *ServerInterfaceWrapper) PostOffersIdReject(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostOffersIdReject(c, id)
}

// PostUsers operation middleware
func (siw *ServerInterfaceWrapper) PostUsers(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostUsers(c)
}

// DeleteUsersId operation middleware
func (siw *ServerInterfaceWrapper) DeleteUsersId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteUsersId(c, id)
}

// GetUsersId operation middleware
func (siw *ServerInterfaceWrapper) GetUsersId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUsersId(c, id)
}

// PatchUsersId operation middleware
func (siw *ServerInterfaceWrapper) PatchUsersId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchUsersId(c, id)
}

// PostUsersIdChangePassword operation middleware
func (siw *ServerInterfaceWrapper) PostUsersIdChangePassword(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostUsersIdChangePassword(c, id)
}

// PostUsersIdResetPassword operation middleware
func (siw *ServerInterfaceWrapper) PostUsersIdResetPassword(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostUsersIdResetPassword(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/games", wrapper.PostGames)
	router.DELETE(options.BaseURL+"/games/:id", wrapper.DeleteGamesId)
	router.GET(options.BaseURL+"/games/:id", wrapper.GetGamesId)
	router.PATCH(options.BaseURL+"/games/:id", wrapper.PatchGamesId)
	router.POST(options.BaseURL+"/offers", wrapper.PostOffers)
	router.DELETE(options.BaseURL+"/offers/:id", wrapper.DeleteOffersId)
	router.GET(options.BaseURL+"/offers/:id", wrapper.GetOffersId)
	router.PATCH(options.BaseURL+"/offers/:id", wrapper.PatchOffersId)
	router.POST(options.BaseURL+"/offers/:id/accept", wrapper.PostOffersIdAccept)
	router.GET(options.BaseURL+"/offers/:id/incoming", wrapper.GetOffersIdIncoming)
	router.GET(options.BaseURL+"/offers/:id/outgoing", wrapper.GetOffersIdOutgoing)
	router.POST(options.BaseURL+"/offers/:id/reject", wrapper.PostOffersIdReject)
	router.POST(options.BaseURL+"/users", wrapper.PostUsers)
	router.DELETE(options.BaseURL+"/users/:id", wrapper.DeleteUsersId)
	router.GET(options.BaseURL+"/users/:id", wrapper.GetUsersId)
	router.PATCH(options.BaseURL+"/users/:id", wrapper.PatchUsersId)
	router.POST(options.BaseURL+"/users/:id/change-password", wrapper.PostUsersIdChangePassword)
	router.POST(options.BaseURL+"/users/:id/reset-password", wrapper.PostUsersIdResetPassword)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
